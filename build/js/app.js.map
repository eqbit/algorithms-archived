{"version":3,"sources":["arrayCarousel.js","getLettersNumber.js","sort-sections.js"],"names":["incomeData","shift","shiftArray","i","unshift","pop","console","log","incomingString","String","prototype","cleanup","replace","countLetters","lettersArray","toUpperCase","split","result","current","letter","quantity","updateResult","push","forEach","index","join","incomingData","getSortedAdvanced","hash","length","getStart","reduce","start","item","map","subItem","includes","getNext","previous","find","getResult","currentData","splice","next"],"mappings":"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","file":"app.js","sourcesContent":["(function() {\n  const incomeData = [1,2,3,4,5,6,7,8,9];\n  const shift = 3;\n\n  const shiftArray = (incomeData, shift) => {\n    for(let i = 0; i < shift; i++) {\n      incomeData.unshift(incomeData.pop());\n    }\n\n    return incomeData;\n  };\n\n  console.log(shiftArray(incomeData, shift));\n})();","(function() {\n  const incomingString = 'aa1AaabbbCccAaaA32233aaBbbbbCccCCccccc';\n\n  String.prototype.cleanup = function() {\n    return this.replace(/[^a-z]+/ig, \"\");\n  };\n\n  const countLetters = incomingString => {\n    const lettersArray = incomingString.cleanup().toUpperCase().split('');\n\n    const result = [];\n\n    let current = {\n      letter: lettersArray[0],\n      quantity: 1\n    };\n\n    const updateResult = () => {\n      result.push(`${current.letter}${current.quantity}`);\n    };\n\n    lettersArray.forEach((letter, index) => {\n      if(!index) return;\n\n      if(letter === current.letter) {\n        current.quantity++\n      } else {\n        updateResult();\n\n        current = {\n          letter: letter,\n          quantity: 1\n        };\n      }\n    });\n\n    updateResult();\n\n    return(result.join(''));\n  };\n\n  console.log(countLetters(incomingString));\n})();","(function(){\n  const incomingData = [\n    ['Санкт Петербург', 'Точка 3'],\n    ['Начало', 'Санкт Петербург'],\n    ['Москва', 'Конец'],\n    ['Точка 3', 'Москва']\n  ];\n\n  const getSortedAdvanced = incomingData => {\n    const hash = {};\n\n    for(let i = 0; i < incomingData.length; i++) {\n      hash[incomingData[i]] = i;\n    }\n\n    const getStart = incomingData => {\n      return incomingData.reduce((start, item) => {\n        return incomingData.map(subItem => subItem[1]).includes(item[0])\n          ? start\n          : item\n      }, incomingData[0])\n    };\n\n    const getNext = (incomingData, previous) => {\n      return incomingData.find(item => item[0] === previous[1])\n    };\n\n    const getResult = (incomingData, currentData, result) => {\n      if(!currentData) {\n        const start = getStart(incomingData);\n        currentData = incomingData;\n        currentData.splice(hash[start], 1);\n        return getResult(incomingData, currentData, [start]);\n      }\n\n      const next = getNext(currentData, result[result.length - 1]);\n\n      if(next)\n        result.push(next);\n\n      currentData.splice(hash[next], 1);\n\n      if(currentData.length > 1) {\n        return getResult(incomingData, currentData, result);\n      }\n\n      return result;\n    };\n\n    return getResult(incomingData);\n  };\n\n\n  console.log(getSortedAdvanced(incomingData));\n})();"]}