{"version":3,"sources":["app.js"],"names":["incomingData","getSortedAdvanced","hash","i","length","getStart","reduce","start","item","map","subItem","includes","getNext","previous","find","getResult","currentData","result","splice","next","push","console","log"],"mappings":";;AAAA,IAAMA,YAAY,GAAG,CACnB,CAAC,iBAAD,EAAoB,SAApB,CADmB,EAEnB,CAAC,QAAD,EAAW,iBAAX,CAFmB,EAGnB,CAAC,QAAD,EAAW,OAAX,CAHmB,EAInB,CAAC,SAAD,EAAY,GAAZ,CAJmB,CAArB;;AAOA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAAAD,YAAY,EAAI;AACxC,MAAME,IAAI,GAAG,EAAb;;AAEA,OAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGH,YAAY,CAACI,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AAC3CD,IAAAA,IAAI,CAACF,YAAY,CAACG,CAAD,CAAb,CAAJ,GAAwBA,CAAxB;AACD;;AAED,MAAME,QAAQ,GAAG,SAAXA,QAAW,CAAAL,YAAY,EAAI;AAC/B,WAAOA,YAAY,CAACM,MAAb,CAAoB,UAACC,KAAD,EAAQC,IAAR,EAAiB;AAC1C,aAAOR,YAAY,CAACS,GAAb,CAAiB,UAAAC,OAAO;AAAA,eAAIA,OAAO,CAAC,CAAD,CAAX;AAAA,OAAxB,EAAwCC,QAAxC,CAAiDH,IAAI,CAAC,CAAD,CAArD,IACHD,KADG,GAEHC,IAFJ;AAGD,KAJM,EAIJR,YAAY,CAAC,CAAD,CAJR,CAAP;AAKD,GAND;;AAQA,MAAMY,OAAO,GAAG,SAAVA,OAAU,CAACZ,YAAD,EAAea,QAAf,EAA4B;AAC1C,WAAOb,YAAY,CAACc,IAAb,CAAkB,UAAAN,IAAI;AAAA,aAAIA,IAAI,CAAC,CAAD,CAAJ,KAAYK,QAAQ,CAAC,CAAD,CAAxB;AAAA,KAAtB,CAAP;AACD,GAFD;;AAIA,MAAME,SAAS,GAAG,SAAZA,SAAY,CAACf,YAAD,EAAegB,WAAf,EAA4BC,MAA5B,EAAuC;AACvD,QAAG,CAACD,WAAJ,EAAiB;AACf,UAAMT,KAAK,GAAGF,QAAQ,CAACL,YAAD,CAAtB;AACAgB,MAAAA,WAAW,GAAGhB,YAAd;AACAgB,MAAAA,WAAW,CAACE,MAAZ,CAAmBhB,IAAI,CAACK,KAAD,CAAvB,EAAgC,CAAhC;AACA,aAAOQ,SAAS,CAACf,YAAD,EAAegB,WAAf,EAA4B,CAACT,KAAD,CAA5B,CAAhB;AACD;;AAED,QAAMY,IAAI,GAAGP,OAAO,CAACI,WAAD,EAAcC,MAAM,CAACA,MAAM,CAACb,MAAP,GAAgB,CAAjB,CAApB,CAApB;AAEA,QAAGe,IAAH,EACEF,MAAM,CAACG,IAAP,CAAYD,IAAZ;AAEFH,IAAAA,WAAW,CAACE,MAAZ,CAAmBhB,IAAI,CAACiB,IAAD,CAAvB,EAA+B,CAA/B;;AAEA,QAAGH,WAAW,CAACZ,MAAZ,GAAqB,CAAxB,EAA2B;AACzB,aAAOW,SAAS,CAACf,YAAD,EAAegB,WAAf,EAA4BC,MAA5B,CAAhB;AACD;;AAED,WAAOA,MAAP;AACD,GApBD;;AAsBA,SAAOF,SAAS,CAACf,YAAD,CAAhB;AACD,CA1CD;;AA6CAqB,OAAO,CAACC,GAAR,CAAYrB,iBAAiB,CAACD,YAAD,CAA7B","file":"app.js","sourcesContent":["const incomingData = [\n  ['Санкт Петербург', 'Точка 3'],\n  ['Начало', 'Санкт Петербург'],\n  ['Москва', 'Конец'],\n  ['Точка 3', '3']\n];\n\nconst getSortedAdvanced = incomingData => {\n  const hash = {};\n\n  for(let i = 0; i < incomingData.length; i++) {\n    hash[incomingData[i]] = i;\n  }\n\n  const getStart = incomingData => {\n    return incomingData.reduce((start, item) => {\n      return incomingData.map(subItem => subItem[1]).includes(item[0])\n        ? start\n        : item\n    }, incomingData[0])\n  };\n\n  const getNext = (incomingData, previous) => {\n    return incomingData.find(item => item[0] === previous[1])\n  };\n\n  const getResult = (incomingData, currentData, result) => {\n    if(!currentData) {\n      const start = getStart(incomingData);\n      currentData = incomingData;\n      currentData.splice(hash[start], 1);\n      return getResult(incomingData, currentData, [start]);\n    }\n\n    const next = getNext(currentData, result[result.length - 1]);\n\n    if(next)\n      result.push(next);\n\n    currentData.splice(hash[next], 1);\n\n    if(currentData.length > 1) {\n      return getResult(incomingData, currentData, result);\n    }\n\n    return result;\n  };\n\n  return getResult(incomingData);\n};\n\n\nconsole.log(getSortedAdvanced(incomingData));"]}